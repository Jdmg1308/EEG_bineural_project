// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from packets.djinni

#pragma once

#include <functional>

namespace interaxon { namespace bridge {

/**
 * \if IOS_ONLY
 * \file
 * \endif
 * Represents the data mapping in an Optics packet.
 *
 * Functional near-infrared spectroscopy (fNIRS) is a non-invasive imaging technique that measures brain
 * activity by detecting changes in blood oxygenation.
 *
 * The light absorbtion of the blood varies by wavelength. The 750nm wavelength is sensitive to deoxygenated
 * hemoglobin (HbR), while the 850nm wavelength is sensitive to oxygenated hemoglobin (HbO). By analyzing the
 * absorption of these wavelengths, we can determine changes in blood oxygenation levels.
 *
 * For more information on fNIRS, see the following Wikipedia article:
 * <br/>
 * https://en.wikipedia.org/wiki/Functional_near-infrared_spectroscopy
 *
 * The Optics data is also used to measure PPG.
 *
 * Optics data values are given in microamps (uA).
 *
 * \sa \enumlink{MuseDataPacketType,OPTICS,IXNMuseDataPacketTypeOptics}
 * \sa \functionlink{MuseDataPacket,getOpticsChannelValue,get_optics_channel_value}
 */
enum class Optics : int {
    /** 730nm left outer (8 and 16 channel modes) or 730nm left inner (4 channel mode) */
    OPTICS1,
    /** 730nm right outer (8 and 16 channel modes) or 730nm right inner (4 channel mode) */
    OPTICS2,
    /** 850nm left outer (8 and 16 channel modes) or 850nm left inner (4 channel mode) */
    OPTICS3,
    /** 850nm right outer (8 and 16 channel modes) or 850nm right inner (4 channel mode) */
    OPTICS4,
    /** 730nm left inner (8 and 16 channel modes) */
    OPTICS5,
    /** 730nm right inner (8 and 16 channel modes) */
    OPTICS6,
    /** 850nm left inner (8 and 16 channel modes) */
    OPTICS7,
    /** 850nm right inner (8 and 16 channel modes) */
    OPTICS8,
    /** Red left outer (16 channel mode)    */
    OPTICS9,
    /** Red right outer (16 channel mode) */
    OPTICS10,
    /** Ambient left outer (16 channel mode) */
    OPTICS11,
    /** Ambient right outer (16 channel mode) */
    OPTICS12,
    /** Red left inner (16 channel mode) */
    OPTICS13,
    /** Red right inner (16 channel mode) */
    OPTICS14,
    /** Ambient left inner (16 channel mode) */
    OPTICS15,
    /** Ambient right inner (16 channel mode) */
    OPTICS16,
};

} }  // namespace interaxon::bridge

namespace std {

template <>
struct hash<::interaxon::bridge::Optics> {
    size_t operator()(::interaxon::bridge::Optics type) const {
        return std::hash<int>()(static_cast<int>(type));
    }
};

}  // namespace std
