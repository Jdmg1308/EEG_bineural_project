// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_AI_Actions_Hosting_1_H
#define WINRT_Windows_AI_Actions_Hosting_1_H
#include "winrt/impl/Windows.AI.Actions.Hosting.0.h"
WINRT_EXPORT namespace winrt::Windows::AI::Actions::Hosting
{
    struct __declspec(empty_bases) IActionCatalog :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IActionCatalog>
    {
        IActionCatalog(std::nullptr_t = nullptr) noexcept {}
        IActionCatalog(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IActionCatalog(IActionCatalog const&) noexcept = default;
        IActionCatalog(IActionCatalog&&) noexcept = default;
        IActionCatalog& operator=(IActionCatalog const&) & noexcept = default;
        IActionCatalog& operator=(IActionCatalog&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IActionDefinition :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IActionDefinition>
    {
        IActionDefinition(std::nullptr_t = nullptr) noexcept {}
        IActionDefinition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IActionDefinition(IActionDefinition const&) noexcept = default;
        IActionDefinition(IActionDefinition&&) noexcept = default;
        IActionDefinition& operator=(IActionDefinition const&) & noexcept = default;
        IActionDefinition& operator=(IActionDefinition&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IActionDefinition2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IActionDefinition2>
    {
        IActionDefinition2(std::nullptr_t = nullptr) noexcept {}
        IActionDefinition2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IActionDefinition2(IActionDefinition2 const&) noexcept = default;
        IActionDefinition2(IActionDefinition2&&) noexcept = default;
        IActionDefinition2& operator=(IActionDefinition2 const&) & noexcept = default;
        IActionDefinition2& operator=(IActionDefinition2&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IActionEntityRegistrationInfo :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IActionEntityRegistrationInfo>
    {
        IActionEntityRegistrationInfo(std::nullptr_t = nullptr) noexcept {}
        IActionEntityRegistrationInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IActionEntityRegistrationInfo(IActionEntityRegistrationInfo const&) noexcept = default;
        IActionEntityRegistrationInfo(IActionEntityRegistrationInfo&&) noexcept = default;
        IActionEntityRegistrationInfo& operator=(IActionEntityRegistrationInfo const&) & noexcept = default;
        IActionEntityRegistrationInfo& operator=(IActionEntityRegistrationInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IActionOverload :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IActionOverload>
    {
        IActionOverload(std::nullptr_t = nullptr) noexcept {}
        IActionOverload(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IActionOverload(IActionOverload const&) noexcept = default;
        IActionOverload(IActionOverload&&) noexcept = default;
        IActionOverload& operator=(IActionOverload const&) & noexcept = default;
        IActionOverload& operator=(IActionOverload&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IActionOverload2 :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IActionOverload2>
    {
        IActionOverload2(std::nullptr_t = nullptr) noexcept {}
        IActionOverload2(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IActionOverload2(IActionOverload2 const&) noexcept = default;
        IActionOverload2(IActionOverload2&&) noexcept = default;
        IActionOverload2& operator=(IActionOverload2 const&) & noexcept = default;
        IActionOverload2& operator=(IActionOverload2&&) & noexcept = default;
    };
}
#endif
