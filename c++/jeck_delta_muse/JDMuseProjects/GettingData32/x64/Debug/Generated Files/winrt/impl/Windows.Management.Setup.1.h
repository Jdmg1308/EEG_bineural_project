// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_Management_Setup_1_H
#define WINRT_Windows_Management_Setup_1_H
#include "winrt/impl/Windows.Management.Setup.0.h"
WINRT_EXPORT namespace winrt::Windows::Management::Setup
{
    struct __declspec(empty_bases) IAgentProvisioningProgressReport :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IAgentProvisioningProgressReport>
    {
        IAgentProvisioningProgressReport(std::nullptr_t = nullptr) noexcept {}
        IAgentProvisioningProgressReport(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IAgentProvisioningProgressReport(IAgentProvisioningProgressReport const&) noexcept = default;
        IAgentProvisioningProgressReport(IAgentProvisioningProgressReport&&) noexcept = default;
        IAgentProvisioningProgressReport& operator=(IAgentProvisioningProgressReport const&) & noexcept = default;
        IAgentProvisioningProgressReport& operator=(IAgentProvisioningProgressReport&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeploymentSessionConnectionChangedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeploymentSessionConnectionChangedEventArgs>
    {
        IDeploymentSessionConnectionChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IDeploymentSessionConnectionChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeploymentSessionConnectionChangedEventArgs(IDeploymentSessionConnectionChangedEventArgs const&) noexcept = default;
        IDeploymentSessionConnectionChangedEventArgs(IDeploymentSessionConnectionChangedEventArgs&&) noexcept = default;
        IDeploymentSessionConnectionChangedEventArgs& operator=(IDeploymentSessionConnectionChangedEventArgs const&) & noexcept = default;
        IDeploymentSessionConnectionChangedEventArgs& operator=(IDeploymentSessionConnectionChangedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeploymentSessionHeartbeatRequestedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeploymentSessionHeartbeatRequestedEventArgs>
    {
        IDeploymentSessionHeartbeatRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IDeploymentSessionHeartbeatRequestedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeploymentSessionHeartbeatRequestedEventArgs(IDeploymentSessionHeartbeatRequestedEventArgs const&) noexcept = default;
        IDeploymentSessionHeartbeatRequestedEventArgs(IDeploymentSessionHeartbeatRequestedEventArgs&&) noexcept = default;
        IDeploymentSessionHeartbeatRequestedEventArgs& operator=(IDeploymentSessionHeartbeatRequestedEventArgs const&) & noexcept = default;
        IDeploymentSessionHeartbeatRequestedEventArgs& operator=(IDeploymentSessionHeartbeatRequestedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeploymentSessionStateChangedEventArgs :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeploymentSessionStateChangedEventArgs>
    {
        IDeploymentSessionStateChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
        IDeploymentSessionStateChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeploymentSessionStateChangedEventArgs(IDeploymentSessionStateChangedEventArgs const&) noexcept = default;
        IDeploymentSessionStateChangedEventArgs(IDeploymentSessionStateChangedEventArgs&&) noexcept = default;
        IDeploymentSessionStateChangedEventArgs& operator=(IDeploymentSessionStateChangedEventArgs const&) & noexcept = default;
        IDeploymentSessionStateChangedEventArgs& operator=(IDeploymentSessionStateChangedEventArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeploymentWorkload :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeploymentWorkload>
    {
        IDeploymentWorkload(std::nullptr_t = nullptr) noexcept {}
        IDeploymentWorkload(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeploymentWorkload(IDeploymentWorkload const&) noexcept = default;
        IDeploymentWorkload(IDeploymentWorkload&&) noexcept = default;
        IDeploymentWorkload& operator=(IDeploymentWorkload const&) & noexcept = default;
        IDeploymentWorkload& operator=(IDeploymentWorkload&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeploymentWorkloadBatch :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeploymentWorkloadBatch>
    {
        IDeploymentWorkloadBatch(std::nullptr_t = nullptr) noexcept {}
        IDeploymentWorkloadBatch(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeploymentWorkloadBatch(IDeploymentWorkloadBatch const&) noexcept = default;
        IDeploymentWorkloadBatch(IDeploymentWorkloadBatch&&) noexcept = default;
        IDeploymentWorkloadBatch& operator=(IDeploymentWorkloadBatch const&) & noexcept = default;
        IDeploymentWorkloadBatch& operator=(IDeploymentWorkloadBatch&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeploymentWorkloadBatchFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeploymentWorkloadBatchFactory>
    {
        IDeploymentWorkloadBatchFactory(std::nullptr_t = nullptr) noexcept {}
        IDeploymentWorkloadBatchFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeploymentWorkloadBatchFactory(IDeploymentWorkloadBatchFactory const&) noexcept = default;
        IDeploymentWorkloadBatchFactory(IDeploymentWorkloadBatchFactory&&) noexcept = default;
        IDeploymentWorkloadBatchFactory& operator=(IDeploymentWorkloadBatchFactory const&) & noexcept = default;
        IDeploymentWorkloadBatchFactory& operator=(IDeploymentWorkloadBatchFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDeploymentWorkloadFactory :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDeploymentWorkloadFactory>
    {
        IDeploymentWorkloadFactory(std::nullptr_t = nullptr) noexcept {}
        IDeploymentWorkloadFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDeploymentWorkloadFactory(IDeploymentWorkloadFactory const&) noexcept = default;
        IDeploymentWorkloadFactory(IDeploymentWorkloadFactory&&) noexcept = default;
        IDeploymentWorkloadFactory& operator=(IDeploymentWorkloadFactory const&) & noexcept = default;
        IDeploymentWorkloadFactory& operator=(IDeploymentWorkloadFactory&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IDevicePreparationExecutionContext :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IDevicePreparationExecutionContext>
    {
        IDevicePreparationExecutionContext(std::nullptr_t = nullptr) noexcept {}
        IDevicePreparationExecutionContext(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IDevicePreparationExecutionContext(IDevicePreparationExecutionContext const&) noexcept = default;
        IDevicePreparationExecutionContext(IDevicePreparationExecutionContext&&) noexcept = default;
        IDevicePreparationExecutionContext& operator=(IDevicePreparationExecutionContext const&) & noexcept = default;
        IDevicePreparationExecutionContext& operator=(IDevicePreparationExecutionContext&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMachineProvisioningProgressReporter :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMachineProvisioningProgressReporter>
    {
        IMachineProvisioningProgressReporter(std::nullptr_t = nullptr) noexcept {}
        IMachineProvisioningProgressReporter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMachineProvisioningProgressReporter(IMachineProvisioningProgressReporter const&) noexcept = default;
        IMachineProvisioningProgressReporter(IMachineProvisioningProgressReporter&&) noexcept = default;
        IMachineProvisioningProgressReporter& operator=(IMachineProvisioningProgressReporter const&) & noexcept = default;
        IMachineProvisioningProgressReporter& operator=(IMachineProvisioningProgressReporter&&) & noexcept = default;
    };
    struct __declspec(empty_bases) IMachineProvisioningProgressReporterStatics :
        winrt::Windows::Foundation::IInspectable,
        impl::consume_t<IMachineProvisioningProgressReporterStatics>
    {
        IMachineProvisioningProgressReporterStatics(std::nullptr_t = nullptr) noexcept {}
        IMachineProvisioningProgressReporterStatics(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::Foundation::IInspectable(ptr, take_ownership_from_abi) {}
        IMachineProvisioningProgressReporterStatics(IMachineProvisioningProgressReporterStatics const&) noexcept = default;
        IMachineProvisioningProgressReporterStatics(IMachineProvisioningProgressReporterStatics&&) noexcept = default;
        IMachineProvisioningProgressReporterStatics& operator=(IMachineProvisioningProgressReporterStatics const&) & noexcept = default;
        IMachineProvisioningProgressReporterStatics& operator=(IMachineProvisioningProgressReporterStatics&&) & noexcept = default;
    };
}
#endif
