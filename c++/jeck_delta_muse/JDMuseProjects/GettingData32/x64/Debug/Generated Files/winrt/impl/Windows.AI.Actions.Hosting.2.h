// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_AI_Actions_Hosting_2_H
#define WINRT_Windows_AI_Actions_Hosting_2_H
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.AI.Actions.Hosting.1.h"
WINRT_EXPORT namespace winrt::Windows::AI::Actions::Hosting
{
    struct __declspec(empty_bases) ActionCatalog : winrt::Windows::AI::Actions::Hosting::IActionCatalog,
        impl::require<ActionCatalog, winrt::Windows::Foundation::IClosable>
    {
        ActionCatalog(std::nullptr_t) noexcept {}
        ActionCatalog(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::Hosting::IActionCatalog(ptr, take_ownership_from_abi) {}
        ActionCatalog(ActionCatalog const&) noexcept = default;
        ActionCatalog(ActionCatalog&&) noexcept = default;
        ActionCatalog& operator=(ActionCatalog const&) & noexcept = default;
        ActionCatalog& operator=(ActionCatalog&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ActionDefinition : winrt::Windows::AI::Actions::Hosting::IActionDefinition,
        impl::require<ActionDefinition, winrt::Windows::AI::Actions::Hosting::IActionDefinition2, winrt::Windows::Foundation::IClosable>
    {
        ActionDefinition(std::nullptr_t) noexcept {}
        ActionDefinition(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::Hosting::IActionDefinition(ptr, take_ownership_from_abi) {}
        ActionDefinition(ActionDefinition const&) noexcept = default;
        ActionDefinition(ActionDefinition&&) noexcept = default;
        ActionDefinition& operator=(ActionDefinition const&) & noexcept = default;
        ActionDefinition& operator=(ActionDefinition&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ActionEntityRegistrationInfo : winrt::Windows::AI::Actions::Hosting::IActionEntityRegistrationInfo,
        impl::require<ActionEntityRegistrationInfo, winrt::Windows::Foundation::IClosable>
    {
        ActionEntityRegistrationInfo(std::nullptr_t) noexcept {}
        ActionEntityRegistrationInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::Hosting::IActionEntityRegistrationInfo(ptr, take_ownership_from_abi) {}
        ActionEntityRegistrationInfo(ActionEntityRegistrationInfo const&) noexcept = default;
        ActionEntityRegistrationInfo(ActionEntityRegistrationInfo&&) noexcept = default;
        ActionEntityRegistrationInfo& operator=(ActionEntityRegistrationInfo const&) & noexcept = default;
        ActionEntityRegistrationInfo& operator=(ActionEntityRegistrationInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ActionOverload : winrt::Windows::AI::Actions::Hosting::IActionOverload,
        impl::require<ActionOverload, winrt::Windows::AI::Actions::Hosting::IActionOverload2, winrt::Windows::Foundation::IClosable>
    {
        ActionOverload(std::nullptr_t) noexcept {}
        ActionOverload(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::Hosting::IActionOverload(ptr, take_ownership_from_abi) {}
        ActionOverload(ActionOverload const&) noexcept = default;
        ActionOverload(ActionOverload&&) noexcept = default;
        ActionOverload& operator=(ActionOverload const&) & noexcept = default;
        ActionOverload& operator=(ActionOverload&&) & noexcept = default;
    };
}
#endif
