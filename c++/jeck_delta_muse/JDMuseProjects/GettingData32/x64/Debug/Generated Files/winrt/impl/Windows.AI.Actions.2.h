// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210505.3

#ifndef WINRT_Windows_AI_Actions_2_H
#define WINRT_Windows_AI_Actions_2_H
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.AI.Actions.1.h"
WINRT_EXPORT namespace winrt::Windows::AI::Actions
{
    struct __declspec(empty_bases) ActionEntity : winrt::Windows::AI::Actions::IActionEntity,
        impl::require<ActionEntity, winrt::Windows::AI::Actions::IActionEntity2, winrt::Windows::Foundation::IClosable>
    {
        ActionEntity(std::nullptr_t) noexcept {}
        ActionEntity(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IActionEntity(ptr, take_ownership_from_abi) {}
        ActionEntity(ActionEntity const&) noexcept = default;
        ActionEntity(ActionEntity&&) noexcept = default;
        ActionEntity& operator=(ActionEntity const&) & noexcept = default;
        ActionEntity& operator=(ActionEntity&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ActionEntityDisplayInfo : winrt::Windows::AI::Actions::IActionEntityDisplayInfo,
        impl::require<ActionEntityDisplayInfo, winrt::Windows::Foundation::IClosable>
    {
        ActionEntityDisplayInfo(std::nullptr_t) noexcept {}
        ActionEntityDisplayInfo(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IActionEntityDisplayInfo(ptr, take_ownership_from_abi) {}
        ActionEntityDisplayInfo(ActionEntityDisplayInfo const&) noexcept = default;
        ActionEntityDisplayInfo(ActionEntityDisplayInfo&&) noexcept = default;
        ActionEntityDisplayInfo& operator=(ActionEntityDisplayInfo const&) & noexcept = default;
        ActionEntityDisplayInfo& operator=(ActionEntityDisplayInfo&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ActionEntityFactory : winrt::Windows::AI::Actions::IActionEntityFactory2,
        impl::require<ActionEntityFactory, winrt::Windows::AI::Actions::IActionEntityFactory3, winrt::Windows::Foundation::IClosable>
    {
        ActionEntityFactory(std::nullptr_t) noexcept {}
        ActionEntityFactory(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IActionEntityFactory2(ptr, take_ownership_from_abi) {}
        ActionEntityFactory(ActionEntityFactory const&) noexcept = default;
        ActionEntityFactory(ActionEntityFactory&&) noexcept = default;
        ActionEntityFactory& operator=(ActionEntityFactory const&) & noexcept = default;
        ActionEntityFactory& operator=(ActionEntityFactory&&) & noexcept = default;
        using winrt::Windows::AI::Actions::IActionEntityFactory2::CreateTextEntity;
        using impl::consume_t<ActionEntityFactory, winrt::Windows::AI::Actions::IActionEntityFactory3>::CreateTextEntity;
    };
    struct __declspec(empty_bases) ActionFeedback : winrt::Windows::AI::Actions::IActionFeedback,
        impl::require<ActionFeedback, winrt::Windows::Foundation::IClosable>
    {
        ActionFeedback(std::nullptr_t) noexcept {}
        ActionFeedback(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IActionFeedback(ptr, take_ownership_from_abi) {}
        ActionFeedback(ActionFeedback const&) noexcept = default;
        ActionFeedback(ActionFeedback&&) noexcept = default;
        ActionFeedback& operator=(ActionFeedback const&) & noexcept = default;
        ActionFeedback& operator=(ActionFeedback&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ActionInvocationContext : winrt::Windows::AI::Actions::IActionInvocationContext,
        impl::require<ActionInvocationContext, winrt::Windows::AI::Actions::IActionInvocationContext2, winrt::Windows::Foundation::IClosable>
    {
        ActionInvocationContext(std::nullptr_t) noexcept {}
        ActionInvocationContext(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IActionInvocationContext(ptr, take_ownership_from_abi) {}
        ActionInvocationContext(ActionInvocationContext const&) noexcept = default;
        ActionInvocationContext(ActionInvocationContext&&) noexcept = default;
        ActionInvocationContext& operator=(ActionInvocationContext const&) & noexcept = default;
        ActionInvocationContext& operator=(ActionInvocationContext&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ActionInvocationHelpDetails : winrt::Windows::AI::Actions::IActionInvocationHelpDetails,
        impl::require<ActionInvocationHelpDetails, winrt::Windows::Foundation::IClosable>
    {
        ActionInvocationHelpDetails(std::nullptr_t) noexcept {}
        ActionInvocationHelpDetails(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IActionInvocationHelpDetails(ptr, take_ownership_from_abi) {}
        ActionInvocationHelpDetails(ActionInvocationHelpDetails const&) noexcept = default;
        ActionInvocationHelpDetails(ActionInvocationHelpDetails&&) noexcept = default;
        ActionInvocationHelpDetails& operator=(ActionInvocationHelpDetails const&) & noexcept = default;
        ActionInvocationHelpDetails& operator=(ActionInvocationHelpDetails&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ActionRuntime : winrt::Windows::AI::Actions::IActionRuntime,
        impl::require<ActionRuntime, winrt::Windows::AI::Actions::IActionRuntime2, winrt::Windows::Foundation::IClosable>
    {
        ActionRuntime(std::nullptr_t) noexcept {}
        ActionRuntime(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IActionRuntime(ptr, take_ownership_from_abi) {}
        ActionRuntime(ActionRuntime const&) noexcept = default;
        ActionRuntime(ActionRuntime&&) noexcept = default;
        ActionRuntime& operator=(ActionRuntime const&) & noexcept = default;
        ActionRuntime& operator=(ActionRuntime&&) & noexcept = default;
    };
    struct __declspec(empty_bases) ContactActionEntity : winrt::Windows::AI::Actions::IContactActionEntity,
        impl::base<ContactActionEntity, winrt::Windows::AI::Actions::ActionEntity>,
        impl::require<ContactActionEntity, winrt::Windows::AI::Actions::IActionEntity, winrt::Windows::AI::Actions::IActionEntity2, winrt::Windows::Foundation::IClosable>
    {
        ContactActionEntity(std::nullptr_t) noexcept {}
        ContactActionEntity(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IContactActionEntity(ptr, take_ownership_from_abi) {}
        ContactActionEntity(ContactActionEntity const&) noexcept = default;
        ContactActionEntity(ContactActionEntity&&) noexcept = default;
        ContactActionEntity& operator=(ContactActionEntity const&) & noexcept = default;
        ContactActionEntity& operator=(ContactActionEntity&&) & noexcept = default;
    };
    struct __declspec(empty_bases) DocumentActionEntity : winrt::Windows::AI::Actions::IDocumentActionEntity,
        impl::base<DocumentActionEntity, winrt::Windows::AI::Actions::ActionEntity>,
        impl::require<DocumentActionEntity, winrt::Windows::AI::Actions::IActionEntity, winrt::Windows::AI::Actions::IActionEntity2, winrt::Windows::Foundation::IClosable>
    {
        DocumentActionEntity(std::nullptr_t) noexcept {}
        DocumentActionEntity(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IDocumentActionEntity(ptr, take_ownership_from_abi) {}
        DocumentActionEntity(DocumentActionEntity const&) noexcept = default;
        DocumentActionEntity(DocumentActionEntity&&) noexcept = default;
        DocumentActionEntity& operator=(DocumentActionEntity const&) & noexcept = default;
        DocumentActionEntity& operator=(DocumentActionEntity&&) & noexcept = default;
    };
    struct __declspec(empty_bases) FileActionEntity : winrt::Windows::AI::Actions::IFileActionEntity,
        impl::base<FileActionEntity, winrt::Windows::AI::Actions::ActionEntity>,
        impl::require<FileActionEntity, winrt::Windows::AI::Actions::IActionEntity, winrt::Windows::AI::Actions::IActionEntity2, winrt::Windows::Foundation::IClosable>
    {
        FileActionEntity(std::nullptr_t) noexcept {}
        FileActionEntity(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IFileActionEntity(ptr, take_ownership_from_abi) {}
        FileActionEntity(FileActionEntity const&) noexcept = default;
        FileActionEntity(FileActionEntity&&) noexcept = default;
        FileActionEntity& operator=(FileActionEntity const&) & noexcept = default;
        FileActionEntity& operator=(FileActionEntity&&) & noexcept = default;
    };
    struct __declspec(empty_bases) NamedActionEntity : winrt::Windows::AI::Actions::INamedActionEntity,
        impl::require<NamedActionEntity, winrt::Windows::Foundation::IClosable>
    {
        NamedActionEntity(std::nullptr_t) noexcept {}
        NamedActionEntity(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::INamedActionEntity(ptr, take_ownership_from_abi) {}
        NamedActionEntity(NamedActionEntity const&) noexcept = default;
        NamedActionEntity(NamedActionEntity&&) noexcept = default;
        NamedActionEntity& operator=(NamedActionEntity const&) & noexcept = default;
        NamedActionEntity& operator=(NamedActionEntity&&) & noexcept = default;
    };
    struct __declspec(empty_bases) PhotoActionEntity : winrt::Windows::AI::Actions::IPhotoActionEntity,
        impl::base<PhotoActionEntity, winrt::Windows::AI::Actions::ActionEntity>,
        impl::require<PhotoActionEntity, winrt::Windows::AI::Actions::IActionEntity, winrt::Windows::AI::Actions::IActionEntity2, winrt::Windows::Foundation::IClosable>
    {
        PhotoActionEntity(std::nullptr_t) noexcept {}
        PhotoActionEntity(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IPhotoActionEntity(ptr, take_ownership_from_abi) {}
        PhotoActionEntity(PhotoActionEntity const&) noexcept = default;
        PhotoActionEntity(PhotoActionEntity&&) noexcept = default;
        PhotoActionEntity& operator=(PhotoActionEntity const&) & noexcept = default;
        PhotoActionEntity& operator=(PhotoActionEntity&&) & noexcept = default;
    };
    struct __declspec(empty_bases) RemoteFileActionEntity : winrt::Windows::AI::Actions::IRemoteFileActionEntity,
        impl::base<RemoteFileActionEntity, winrt::Windows::AI::Actions::ActionEntity>,
        impl::require<RemoteFileActionEntity, winrt::Windows::AI::Actions::IActionEntity, winrt::Windows::AI::Actions::IActionEntity2, winrt::Windows::Foundation::IClosable>
    {
        RemoteFileActionEntity(std::nullptr_t) noexcept {}
        RemoteFileActionEntity(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IRemoteFileActionEntity(ptr, take_ownership_from_abi) {}
        RemoteFileActionEntity(RemoteFileActionEntity const&) noexcept = default;
        RemoteFileActionEntity(RemoteFileActionEntity&&) noexcept = default;
        RemoteFileActionEntity& operator=(RemoteFileActionEntity const&) & noexcept = default;
        RemoteFileActionEntity& operator=(RemoteFileActionEntity&&) & noexcept = default;
    };
    struct __declspec(empty_bases) StreamingTextActionEntity : winrt::Windows::AI::Actions::IStreamingTextActionEntity,
        impl::base<StreamingTextActionEntity, winrt::Windows::AI::Actions::ActionEntity>,
        impl::require<StreamingTextActionEntity, winrt::Windows::AI::Actions::IActionEntity, winrt::Windows::AI::Actions::IActionEntity2, winrt::Windows::Foundation::IClosable>
    {
        StreamingTextActionEntity(std::nullptr_t) noexcept {}
        StreamingTextActionEntity(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IStreamingTextActionEntity(ptr, take_ownership_from_abi) {}
        StreamingTextActionEntity(StreamingTextActionEntity const&) noexcept = default;
        StreamingTextActionEntity(StreamingTextActionEntity&&) noexcept = default;
        StreamingTextActionEntity& operator=(StreamingTextActionEntity const&) & noexcept = default;
        StreamingTextActionEntity& operator=(StreamingTextActionEntity&&) & noexcept = default;
    };
    struct __declspec(empty_bases) StreamingTextActionEntityTextChangedArgs : winrt::Windows::AI::Actions::IStreamingTextActionEntityTextChangedArgs
    {
        StreamingTextActionEntityTextChangedArgs(std::nullptr_t) noexcept {}
        StreamingTextActionEntityTextChangedArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IStreamingTextActionEntityTextChangedArgs(ptr, take_ownership_from_abi) {}
        StreamingTextActionEntityTextChangedArgs(StreamingTextActionEntityTextChangedArgs const&) noexcept = default;
        StreamingTextActionEntityTextChangedArgs(StreamingTextActionEntityTextChangedArgs&&) noexcept = default;
        StreamingTextActionEntityTextChangedArgs& operator=(StreamingTextActionEntityTextChangedArgs const&) & noexcept = default;
        StreamingTextActionEntityTextChangedArgs& operator=(StreamingTextActionEntityTextChangedArgs&&) & noexcept = default;
    };
    struct __declspec(empty_bases) StreamingTextActionEntityWriter : winrt::Windows::AI::Actions::IStreamingTextActionEntityWriter,
        impl::require<StreamingTextActionEntityWriter, winrt::Windows::Foundation::IClosable>
    {
        StreamingTextActionEntityWriter(std::nullptr_t) noexcept {}
        StreamingTextActionEntityWriter(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::IStreamingTextActionEntityWriter(ptr, take_ownership_from_abi) {}
        StreamingTextActionEntityWriter(StreamingTextActionEntityWriter const&) noexcept = default;
        StreamingTextActionEntityWriter(StreamingTextActionEntityWriter&&) noexcept = default;
        StreamingTextActionEntityWriter& operator=(StreamingTextActionEntityWriter const&) & noexcept = default;
        StreamingTextActionEntityWriter& operator=(StreamingTextActionEntityWriter&&) & noexcept = default;
    };
    struct __declspec(empty_bases) TableActionEntity : winrt::Windows::AI::Actions::ITableActionEntity,
        impl::base<TableActionEntity, winrt::Windows::AI::Actions::ActionEntity>,
        impl::require<TableActionEntity, winrt::Windows::AI::Actions::IActionEntity, winrt::Windows::AI::Actions::IActionEntity2, winrt::Windows::Foundation::IClosable>
    {
        TableActionEntity(std::nullptr_t) noexcept {}
        TableActionEntity(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::ITableActionEntity(ptr, take_ownership_from_abi) {}
        TableActionEntity(TableActionEntity const&) noexcept = default;
        TableActionEntity(TableActionEntity&&) noexcept = default;
        TableActionEntity& operator=(TableActionEntity const&) & noexcept = default;
        TableActionEntity& operator=(TableActionEntity&&) & noexcept = default;
    };
    struct __declspec(empty_bases) TextActionEntity : winrt::Windows::AI::Actions::ITextActionEntity,
        impl::base<TextActionEntity, winrt::Windows::AI::Actions::ActionEntity>,
        impl::require<TextActionEntity, winrt::Windows::AI::Actions::ITextActionEntity2, winrt::Windows::AI::Actions::IActionEntity, winrt::Windows::AI::Actions::IActionEntity2, winrt::Windows::Foundation::IClosable>
    {
        TextActionEntity(std::nullptr_t) noexcept {}
        TextActionEntity(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Windows::AI::Actions::ITextActionEntity(ptr, take_ownership_from_abi) {}
        TextActionEntity(TextActionEntity const&) noexcept = default;
        TextActionEntity(TextActionEntity&&) noexcept = default;
        TextActionEntity& operator=(TextActionEntity const&) & noexcept = default;
        TextActionEntity& operator=(TextActionEntity&&) & noexcept = default;
    };
}
#endif
